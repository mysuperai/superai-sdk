import click
import yaml
from pycognito import Cognito
from pycognito.exceptions import SoftwareTokenMFAChallengeException
from rich import print

from superai import __version__
from superai.client import Client
from superai.config import get_current_env, list_env_configs, set_env_config, settings
from superai.exceptions import SuperAIAuthorizationError
from superai.log import logger
from superai.utils import (
    load_api_key,
    remove_aws_credentials,
    save_api_key,
    save_aws_credentials,
)
from superai.utils.pip_config import pip_configure
from superai.utils.sso_login import sso_login

COGNITO_USERPOOL_ID = settings.get("cognito", {}).get("userpool_id")
COGNITO_CLIENT_ID = settings.get("cognito", {}).get("client_id")
COGNITO_REGION = settings.get("cognito", {}).get("region")

log = logger.get_logger(__name__)


@click.command()
@click.option("--verbose/--no-verbose", "-vvv", help="Verbose output", default=False)
def info(verbose):
    """Prints CLI configuration."""
    click.echo("=================")
    click.echo("Super.AI CLI Info:")
    click.echo("=================")
    load_api_key()
    click.echo(f"VERSION: {__version__}")
    click.echo(f"ENVIRONMENT: {get_current_env()}")
    click.echo(f"USER: {settings.get('user', {}).get('username')}")
    if verbose:
        click.echo(yaml.dump(settings.as_dict(env=get_current_env()), default_flow_style=False))


@click.group()
@click.pass_context
def env(ctx):
    """Super.AI config operations"""


@env.command(name="list")
@click.pass_context
def env_list(ctx):
    """Args:
    ctx:
    """
    list_env_configs(verbose=True)


@env.command(name="set")
@click.option("--api-key", help="Your super.AI API KEY", required=False)
@click.option("--environment", "-e", help="Set environment", required=False)
@click.pass_context
def env_set(ctx, api_key, environment):
    """Sets configuration."""
    if environment:
        set_env_config(name=environment)
    if api_key:
        save_api_key(api_key)


@click.command()
@click.option("--api-key", help="Your super.AI API KEY", required=True)
def config(api_key):
    """Sets API key."""
    save_api_key(api_key)


@click.command()
@click.option("--account-name", "-a", help="A valid account name", default="superai", show_default=True)
@click.option("--role-name", "-r", help="A valid role name", default="SuperAIDeveloper", show_default=True)
@click.option("--start-url", help="SSO start URL", default="https://superai.awsapps.com/start", show_default=True)
@click.option("--region", help="AWS region", default=settings.region, show_default=True)
def login_sso(account_name, role_name, start_url, region):
    """Login to SSO and add temporary key to the AWS credentials file"""
    sso_login(account_name, role_name, start_url, region)


def authenticate_user(user, password):
    try:
        user.authenticate(password)
    except SoftwareTokenMFAChallengeException:
        code = input("Enter the 6-digit code generated by the TOTP generator: ")
        user.respond_to_software_token_mfa_challenge(code)
    except Exception as e:
        handle_authentication_error(e)
        return None
    return user


def handle_authentication_error(error):
    if hasattr(error, "response") and error.response["Error"]["Code"] in [
        "UserNotFoundException",
        "NotAuthorizedException",
    ]:
        print("Incorrect username or password")
    else:
        print(f"Unexpected error: {error}")


def handle_keys(client, username, show_pip):
    api_keys = client.get_apikeys()
    if len(api_keys) > 0:
        save_api_key(api_keys[0], username=username)
        print(f"Api key {api_keys[0]} was set")
    else:
        print(f"User {username} doesn't have any api keys")
    handle_aws_credentials(client, show_pip)


def handle_aws_credentials(client, show_pip):
    try:
        aws_credentials = client.get_awskeys()
        if aws_credentials:
            save_aws_credentials(aws_credentials)
            pip_configure(show_pip=show_pip)
    except SuperAIAuthorizationError as authorization_error:
        logger.debug(f"ERROR Authorization: {str(authorization_error)}")
        remove_aws_credentials()
    except Exception as exception:
        logger.debug(f"ERROR: {str(exception)}")
        remove_aws_credentials()


@click.command()
@click.option("--username", "-u", help="super.AI Username", required=True)
@click.option("--password", "-p", prompt=True, hide_input=True)
@click.option(
    "--show-pip/--no-show-pip",
    "-pip",
    default=False,
    help="Shows how to set pip configuration manually",
    show_default=True,
)
def login(username, password, show_pip):
    """Login to super.AI and add temporary key to the AWS credentials file"""
    user = Cognito(
        access_key="AKIAIOSFODNN7EXAMPLE",
        secret_key="wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
        user_pool_id=COGNITO_USERPOOL_ID,
        client_id=COGNITO_CLIENT_ID,
        user_pool_region=COGNITO_REGION,
        username=username,
    )
    authenticated_user = authenticate_user(user, password)
    if authenticated_user is None:
        return

    client = Client(auth_token=user.access_token, id_token=user.id_token)
    handle_keys(client, username, show_pip)


@click.command()
def logout():
    """Removes stored API key."""
    save_api_key("")
    print("Stored api key was removed")
