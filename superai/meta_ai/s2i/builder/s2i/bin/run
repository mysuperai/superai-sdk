#!/bin/bash -e
set -x

echo "Unsetting all build env variables"
unset AWS_PROFILE
unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_SESSION_TOKEN

function _get_conda_envs() {
  # Printed value will be list of Conda envs
  /opt/conda/bin/conda env list | tail -n +3 | head -n -1 | cut -d' ' -f1
}

function _is_env_present() {
  # $1 is the Conda env we are probing
  # Return value will be 0 if present (TRUE)

  # shellcheck disable=SC2155
  local _conda_envs=$(_get_conda_envs)
  echo "$_conda_envs" | grep -qw "$1"
  return $?
}


#check environment vars
if [[ -z "$MODEL_NAME" ]]; then

  echo "Failed to find required env vars MODEL_NAME"
  exit 1

else
  cd /home/model-server
  if [[ -z "$MODEL_CLASS_PATH" ]]; then
    echo "--> No model class path specified. Using root directory as model class path."
  else
     # If MODEL_CLASS_PATH is set, then we assume that the model is in a subfolder
     # We prepend the path to the model name
     export MODEL_NAME=$MODEL_CLASS_PATH.$MODEL_NAME.$MODEL_NAME
  fi

  if [[ -x before-run ]]; then
    echo "Executing before-run script"
    ./before-run
  fi

  CONDA_ENV_NAME=${CONDA_ENV_NAME:-env}

  echo "starting microservice in environment '${CONDA_ENV_NAME}'"
  export PATH=/opt/conda/envs/"${CONDA_ENV_NAME}"/bin/:$PATH
  pip --version
  if [ -n "$LAMBDA_MODE" ]; then
    echo "Starting serving with Lambda backend"
    if [ -z "${AWS_LAMBDA_RUNTIME_API}" ]; then
      exec /usr/local/bin/aws-lambda-rie python -m awslambdaric handler.processor
    else
      exec python -m awslambdaric handler.processor
    fi
  elif [ -n "$SELDON_MODE" ]; then
    echo "Starting Seldon microservice"
    export PATH=/home/model-server:$PATH
    if [ -n "$PERSISTENCE" ]; then
      exec seldon-core-microservice "$MODEL_NAME" --service-type "$SERVICE_TYPE" --persistence "$PERSISTENCE" --tracing
    else
      exec seldon-core-microservice "$MODEL_NAME" --service-type "$SERVICE_TYPE" --tracing
    fi
  else
    echo "Starting serving with Sagemaker Backend"
    exec python /home/model-server/dockerd-entrypoint.py "$MODEL_NAME" serve
  fi
fi
